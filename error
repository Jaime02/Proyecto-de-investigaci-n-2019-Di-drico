# -*- coding: utf-8 -*-

from sys import argv, exit
import sys

from OpenGL.GL import glClear, GL_COLOR_BUFFER_BIT, glEnable, GL_DEPTH_TEST, glMatrixMode, GL_PROJECTION, \
    glLoadIdentity, glOrtho, glClearColor, GL_DEPTH_BUFFER_BIT, GL_MODELVIEW, glLineWidth, glBegin, glColor, glVertex, \
    glEnd, glPointSize, GL_POINT_SMOOTH, GL_POINTS, GL_BLEND, glBlendFunc, GL_SRC_ALPHA, \
    GL_QUADS, glDisable, GL_LINES, GL_LINE_LOOP, glDepthMask, GL_FALSE, GL_TRUE, GL_ONE_MINUS_SRC_ALPHA
from OpenGL.GLU import gluLookAt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QOpenGLWidget
from math import sin, cos, radians


class Renderizador(QOpenGLWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self._x = 0
        self._y = 0
        self._z = 0
        self.theta = 405
        self.phi = 45
        self.x = sin(radians(self.theta)) * cos(radians(self.phi)) + self._x
        self.z = sin(radians(self.theta)) * sin(radians(self.phi)) + self._z
        self.y = cos(radians(self.theta)) + self._y
        self.vertices_vertical = ((100, 100, 0), (-100, 100, 0), (-100, 0, 0), (100, 0, 0))
        self.vertices_vertical_debajo = ((100, 0, 0), (-100, 0, 0), (-100, -100, 0), (100, -100, 0))
        self.vertices_horizontal = ((100, 0, 0), (100, 0, 100), (-100, 0, 100), (-100, 0, 0))
        self.vertices_horizontal_detras = ((100, 0, 0), (100, 0, -100), (-100, 0, -100), (-100, 0, 0))
        self.vertices_borde_v = ((100, 100, 0), (100, -100, 0), (-100, -100, 0), (-100, 100, 0))
        self.vertices_borde_h = ((100, 0, 100), (-100, 0, 100), (-100, 0, -100), (100, 0, -100))
        self.puntos = []
        self.num_elementos = 0
        global x, y, z, av, ah
        x = round(self.x, 2)
        y = round(self.y, 2)
        z = round(self.z, 2)
        av = self.theta - 360
        ah = self.phi

    def recalcular(self):
        self.x = sin(radians(self.theta)) * cos(radians(self.phi)) + self._x
        self.z = sin(radians(self.theta)) * sin(radians(self.phi)) + self._z
        self.y = cos(radians(self.theta)) + self._y
        gluLookAt(self.x, self.y, self.z, self._x, self._y, self._z, 0, 1, 0)
        ui.actualizar()
        self.update()

    def ver_alzado(self):
        self.phi = 90
        self.theta = 450
        self.recalcular()

    def ver_planta(self):
        self.phi = 90
        self.theta = 360
        self.recalcular()

    def ver_perfil(self):
        self.phi = 180
        self.theta = 450
        self.recalcular()

    def ver_reset(self):
        self.theta = 405
        self.phi = 45
        self.recalcular()

    def dibujar_planos(self):
        glEnable(GL_BLEND)
        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
        glDepthMask(GL_FALSE)
        glBegin(GL_QUADS)
        glColor(0, 1, 0, 0.5)
        for vertex in range(4):
            glVertex(self.vertices_vertical[vertex])
        glColor(1, 0, 0, 0.5)
        for vertex in range(4):
            glVertex(self.vertices_horizontal[vertex])
        for vertex in range(4):
            glVertex(self.vertices_horizontal_detras[vertex])
        glColor(0, 1, 0, 0.5)
        for vertex in range(4):
            glVertex(self.vertices_vertical_debajo[vertex])
        glEnd()
        glDepthMask(GL_TRUE)
        glDisable(GL_BLEND)
        glLineWidth(1)
        glBegin(GL_LINE_LOOP)
        for vertex in range(4):
            glVertex(self.vertices_borde_v[vertex])
        glColor(1, 0, 0, 0.5)
        glEnd()
        glBegin(GL_LINE_LOOP)
        for vertex in range(4):
            glVertex(self.vertices_borde_h[vertex])
        glEnd()

    @staticmethod
    def dibujar_ejes():
        glLineWidth(5)
        glBegin(GL_LINES)
        # X ROJO
        glColor(1, 0, 0)
        glVertex(0, 0, 0)
        glVertex(10, 0, 0)
        # Y VERDE
        glColor(0, 1, 0)
        glVertex(0, 0, 0)
        glVertex(0, 10, 0)
        # Z AZUL
        glColor(0, 0, 1)
        glVertex(0, 0, 0)
        glVertex(0, 0, 10)
        glEnd()

    # ERROR:
    def borrar_punto(self):
        self.puntos.pop()
        ui.elementos.removeWidget(self.name)
        ui.elementos.removeWidget(self.borrar)
        self.name.deleteLater()
        self.borrar.deleteLater()
        self.num_elementos -= 1

    def crear_punto(self):
        do = ui.valor_do.value()
        cota = ui.valor_cota.value()
        alejamiento = ui.valor_alej.value()
        self.puntos.append((ui.nombre.toPlainText(), do, cota, alejamiento))
        self.name = QtWidgets.QLabel()
        self.name.setText(str(ui.nombre.toPlainText()) + "({}, {}, {})".format(do, cota, alejamiento))
        self.borrar = QtWidgets.QPushButton()
        self.borrar.setText("X")
        self.borrar.clicked.connect(lambda: self.borrar_punto())

        ui.elementos.addWidget(self.name, self.num_elementos, 0, 1, 1)
        ui.elementos.addWidget(self.borrar, self.num_elementos, 1, 1, 1)
        self.num_elementos += 1
        self.update()

    def dibujar_punto(self):
        glColor(0, 0, 0, 0)
        glPointSize(6)
        glEnable(GL_POINT_SMOOTH)
        glBegin(GL_POINTS)
        for i in range(len(self.puntos)):
            glVertex(self.puntos[i][1], self.puntos[i][2], self.puntos[i][3])
        glEnd()
        self.recalcular()

    def initializeGL(self):
        glEnable(GL_DEPTH_TEST)
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        glOrtho(-100, 100, -100, 100, -150, 150)
        glMatrixMode(GL_MODELVIEW)

    def paintGL(self):
        glClearColor(1, 1, 1, 0)
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        glLoadIdentity()
        up = 1
        if self.theta == 0 or self.theta == 360:
            self.theta = 360
            up = -1
        gluLookAt(self.x, self.y, self.z, self._x, self._y, self._z, 0, up, 0)
        self.dibujar_ejes()
        self.dibujar_planos()

        if self.puntos:
            self.dibujar_punto()

    def keyPressEvent(self, event):
        if event.key() == QtCore.Qt.Key_W:
            self.theta -= 15
        elif event.key() == QtCore.Qt.Key_A:
            self.phi += 15
        elif event.key() == QtCore.Qt.Key_S:
            self.theta += 15
        elif event.key() == QtCore.Qt.Key_D:
            self.phi -= 15
        elif event.key() == QtCore.Qt.Key_Q:
            self._z += 1
        elif event.key() == QtCore.Qt.Key_E:
            self._z -= 1
        elif event.key() == QtCore.Qt.Key_Left:
            self._x -= 1
        elif event.key() == QtCore.Qt.Key_Up:
            self._y += 1
        elif event.key() == QtCore.Qt.Key_Right:
            self._x += 1
        elif event.key() == QtCore.Qt.Key_Down:
            self._y -= 1
        elif event.key() == QtCore.Qt.Key_1:
            self.ver_alzado()
        elif event.key() == QtCore.Qt.Key_2:
            self.ver_planta()
        elif event.key() == QtCore.Qt.Key_3:
            self.ver_perfil()
        elif event.key() == QtCore.Qt.Key_R:
            self.ver_reset()

        if self.theta < 360:
            self.theta = 360
        if self.theta > 540:
            self.theta = 540
        if self.phi >= 360:
            self.phi -= 360
        if self.phi < 0:
            self.phi += 360

        self.x = sin(radians(self.theta)) * cos(radians(self.phi)) + self._x
        self.z = sin(radians(self.theta)) * sin(radians(self.phi)) + self._z
        self.y = cos(radians(self.theta)) + self._y

        global x, y, z, av, ah
        x = round(self.x, 2)
        y = round(self.y, 2)
        z = round(self.z, 2)
        av = self.theta - 360
        ah = self.phi

        ui.actualizar()
        self.update()
        super().keyPressEvent(event)


class UiVentana:
    def __init__(self):
        ventana.resize(1500, 1000)
        ventana.setLayoutDirection(QtCore.Qt.LeftToRight)
        # ventana.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        ventana.setFixedSize(ventana.size())
        font = QtGui.QFont()
        font.setPointSize(10)
        self.widget_central = QtWidgets.QWidget(ventana)
        self.gridLayoutWidget = QtWidgets.QWidget(self.widget_central)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(1000, 60, 280, 50))
        self.Vistas = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.Vistas.setContentsMargins(4, 4, 4, 4)
        self.Vistas.setHorizontalSpacing(4)
        self.Vistas.setVerticalSpacing(4)
        self.texto_vista = QtWidgets.QLabel(self.gridLayoutWidget)
        self.texto_vista.setFont(font)
        self.Vistas.addWidget(self.texto_vista, 0, 0, 1, 4)
        self.texto_vista.setText("Vista:")

        self.Visor = Renderizador(self.widget_central)
        self.Visor.setGeometry(QtCore.QRect(0, 0, 1000, 1000))
        self.Visor.setFocusPolicy(QtCore.Qt.StrongFocus)

        self.boton_reset = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.boton_reset.setText("Reset (R)")
        self.boton_reset.clicked.connect(self.Visor.ver_reset)
        self.Vistas.addWidget(self.boton_reset, 1, 0, 1, 1)
        self.boton_alzado = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.boton_alzado.setText("Alzado (1)")
        self.boton_alzado.clicked.connect(self.Visor.ver_alzado)
        self.Vistas.addWidget(self.boton_alzado, 1, 1, 1, 1)
        self.boton_planta = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.boton_planta.setText("Planta (2)")
        self.boton_planta.clicked.connect(self.Visor.ver_planta)
        self.Vistas.addWidget(self.boton_planta, 1, 2, 1, 1)
        self.boton_perfil = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.boton_perfil.setText("Perfil (3)")
        self.boton_perfil.clicked.connect(self.Visor.ver_perfil)
        self.Vistas.addWidget(self.boton_perfil, 1, 3, 1, 1)

        self.gridLayoutWidget_2 = QtWidgets.QWidget(self.widget_central)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(1004, 105, 300, 400))
        self.Punto = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.Punto.setContentsMargins(5, 5, 5, 5)
        self.Punto.setVerticalSpacing(4)
        self.texto_nombre = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.texto_nombre.setAlignment(QtCore.Qt.AlignCenter)
        self.texto_nombre.setText("Nombre:")
        self.Punto.addWidget(self.texto_nombre, 3, 0, 1, 1)
        self.crear_punto = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        self.crear_punto.setText("Crear")
        self.crear_punto.clicked.connect(self.Visor.crear_punto)

        self.Punto.addWidget(self.crear_punto, 3, 2, 1, 1)
        self.texto_cota = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.texto_cota.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.texto_cota.setAlignment(QtCore.Qt.AlignCenter)
        self.texto_cota.setText("Cota")
        self.Punto.addWidget(self.texto_cota, 1, 2, 1, 1)
        self.texto_do = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.texto_do.setAlignment(QtCore.Qt.AlignCenter)
        self.texto_do.setText("D. Origen")
        self.Punto.addWidget(self.texto_do, 1, 0, 1, 1)
        self.texto_alej = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.texto_alej.setAlignment(QtCore.Qt.AlignCenter)
        self.texto_alej.setText("Alejamiento")
        self.Punto.addWidget(self.texto_alej, 1, 1, 1, 1)
        self.texto_crearpunto = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.texto_crearpunto.setFont(font)
        self.texto_crearpunto.setText("Crear punto:")
        self.Punto.addWidget(self.texto_crearpunto, 0, 0, 1, 3)
        self.nombre = QtWidgets.QTextEdit(self.gridLayoutWidget_2)
        self.nombre.setMaximumSize(QtCore.QSize(100, 24))
        self.Punto.addWidget(self.nombre, 3, 1, 1, 1)

        self.scroll = QtWidgets.QScrollArea()
        self.scroll.setWidgetResizable(True)
        self.scroll_widget = QtWidgets.QWidget()
        self.scroll_widget.resize(200, 300)
        self.elementos_widget = QtWidgets.QWidget()
        self.vbox = QtWidgets.QVBoxLayout(self.scroll_widget)
        self.vbox.setContentsMargins(0, 0, 0, 0)
        self.vbox.addWidget(self.elementos_widget)
        self.vbox.addStretch()
        self.elementos = QtWidgets.QGridLayout()
        self.elementos_widget.setLayout(self.elementos)
        self.scroll.setWidget(self.scroll_widget)
        self.scroll_widget.setLayout(self.elementos)
        self.scroll.setWidget(self.scroll_widget)
        self.Punto.addWidget(self.scroll, 4, 0, 1, 3)

        self.valor_do = QtWidgets.QSpinBox(self.gridLayoutWidget_2)
        self.valor_do.setRange(-100, 100)
        self.Punto.addWidget(self.valor_do, 2, 0, 1, 1)
        self.valor_alej = QtWidgets.QSpinBox(self.gridLayoutWidget_2)
        self.valor_alej.setRange(-100, 100)
        self.Punto.addWidget(self.valor_alej, 2, 1, 1, 1)
        self.valor_cota = QtWidgets.QSpinBox(self.gridLayoutWidget_2)
        self.valor_cota.setRange(-100, 100)
        self.Punto.addWidget(self.valor_cota, 2, 2, 1, 1)

        self.gridLayoutWidget_3 = QtWidgets.QWidget(self.widget_central)
        self.gridLayoutWidget_3.setGeometry(QtCore.QRect(1004, 4, 250, 80))
        self.infocuadro = QtWidgets.QGridLayout(self.gridLayoutWidget_3)
        self.infocuadro.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.infocuadro.setContentsMargins(0, 0, 0, 0)
        self.infocuadro.setVerticalSpacing(6)
        self.label_2 = QtWidgets.QLabel(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.infocuadro.addWidget(self.label_2, 0, 0, 1, 1)
        self.cuadrante = QtWidgets.QLabel(self.gridLayoutWidget_3)
        self.infocuadro.addWidget(self.cuadrante, 1, 1, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.gridLayoutWidget_3)
        self.infocuadro.addWidget(self.label_3, 1, 0, 1, 1)
        self.label = QtWidgets.QLabel(self.gridLayoutWidget_3)
        self.infocuadro.addWidget(self.label, 2, 0, 1, 1)
        self.coordenadas = QtWidgets.QLabel(self.gridLayoutWidget_3)
        self.infocuadro.addWidget(self.coordenadas, 2, 1, 1, 1)
        self.angulo = QtWidgets.QLabel(self.gridLayoutWidget_3)
        self.infocuadro.addWidget(self.angulo, 3, 1, 1, 1)
        self.label_2.setText("Información:")
        self.cuadrante.setText("Primer cuadrante")
        self.label_3.setText("Cuadrante:")
        self.label.setText("Coordenadas:")

        ventana.setCentralWidget(self.widget_central)
        ventana.setWindowTitle("Dibujo técnico")
        ventana.show()

    def actualizar(self):
        global x, y, z
        if x == -0:
            x = 0
        if y == -0:
            y = 0
        if z == -0:
            z = 0
        self.coordenadas.setText("X: {} Y: {} Z: {}".format(x, y, z))
        self.angulo.setText("Ángulo vertical: {} Ángulo horizontal: {}".format(av, ah))
        if z == 0 and y == 0:  # puntoCuadrante en LT
            self.cuadrante.setText("Línea de tierra")
        elif z == 0:
            if y > 0:
                self.cuadrante.setText("Plano vertical positivo")
            else:
                self.cuadrante.setText("Plano vertical negativo")
        elif y == 0:
            if z > 0:
                self.cuadrante.setText("Plano horizontal positivo")
            else:
                self.cuadrante.setText("Plano horizontal negativo")
        elif z > 0:
            if y > 0:
                self.cuadrante.setText("Primer cuadrante")
            else:
                self.cuadrante.setText("Cuarto cuadrante")
        else:
            if y > 0:
                self.cuadrante.setText("Segundo cuadrante")
            else:
                self.cuadrante.setText("Tercer cuadrante")


def except_hook(cls, exception, traceback):
    sys.__excepthook__(cls, exception, traceback)


if __name__ == "__main__":
    app = QtWidgets.QApplication(argv)
    ventana = QtWidgets.QMainWindow()
    ui = UiVentana()
    sys.excepthook = except_hook
    ui.actualizar()
    exit(app.exec_())
    
